[alias]
  alias = !"git config --list | awk -F. '/^alias/ { split($2, a, \"=\"); print a[1] \"\\n    \" a[2]; }'"

  b = branch -v
  br = branch -va
  # Remove branches that have already been merged with master
  branch-delete-merged = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"
  bdm = !git branch-delete-merged

  # Nostalgia: Once upon a time, I used Subversion. Before that, CVS. And before that, RCS...
  checkin = commit
  ci = commit
  co = checkout
  # /Nostalgia off
  ciam = commit --amend -C HEAD
  # List contributors with number of commits
  contributors = shortlog --summary --numbered

  d = diff
  di = diff --cached
  # Show the diff between the latest commit and the current state
  dc = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
  # `git dih $number` shows the diff between the state `$number` revisions ago and the current state
  dih = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

  fetchmaster = "!f() { git fetch ${1:-upstream} ${2:-master} && git reset --hard ${1:-upstream}/${2:-master}; }; f"
  fix = commit --fixup

  graph = "!f() { git log --graph --format=\"%Cgreen%h %Cred%aN%Cblue%d %Creset%s %C(yellow)(%cr)%Creset\" \"$@\"; }; f"
  # Find commits where given text (partially) matches file names, or commit messages
  grepfilename = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
  greplog = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

  hasfix = !git greplog fixup!

  ignore = "!f() { echo $1 >> \"${GIT_PREFIX}.gitignore\"; }; f"

  # Merge GitHub pull request on top of the current branch or,
  # if a branch name is specified, on top of the specified branch
  #    mpr PR-number [branch]
  mpr = "!f() { \
    declare currentBranch=\"$(git symbolic-ref --short HEAD)\"; \
    declare branch=\"${2:-$currentBranch}\"; \
    if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
      git fetch origin refs/pull/$1/head:pr/$1 && \
      git checkout -B $branch && \
      git rebase $branch pr/$1 && \
      git checkout -B $branch && \
      git merge pr/$1 && \
      git branch -D pr/$1 && \
      git commit --amend -m \"$(git log -1 --pretty=%B)\n\nCloses #$1.\"; \
    fi \
  }; f"

  remaster = "!f() { git fetch ${1:-upstream} ${2:-master} && git rebase ${1:-upstream}/${2:-master}; }; f"
  ri = rebase -i --autosquash

  # Fetch and checkout a (Github) PR branch given by PR number
  pr = "!f() { git fetch -fu ${2:-origin} refs/pull/$1/head:pr/$1 && git checkout pr/$1; }; f"
  # Forget any PR branches
  pr-clean = "!sh -c 'git for-each-ref refs/heads/pr/* --format=\"%(refname)\" | while read ref ; do branch=${ref#refs/heads/} ; git branch -D $branch ; done'"
  puh = push
  pufff = push --force-with-lease

  stat = status
  st = status
  switch = "!sh -c 'git checkout $0 && git submodule update'"

  undelete = "!sh git checkout $(git rev-list -n 1 HEAD -- \"$1\")^ -- \"$1\""
  undo = reset --soft HEAD@{1}
  undohard = reset --hard HEAD@{1}
  unstage = reset HEAD
  up = fetch --all --prune --tags

  # one-line `show`
  whatis = show -s --pretty='tformat:%h (%s, %ad)' --date=short
  # Find branches/tags containing commit/commit via source/via commit message
  whichbranch = "!f() { git branch -a --contains $1; }; f"
  whichtag = "!f() { git describe --always --contains $1; }; f"
  # Find authors where given text partially matches name or email
  whois = "!sh -c 'git log -i -1 --pretty=\"format:%an <%ae>\n\" --author=\"$1\"' -"


[apply]
  whitespace = fix

[color]
  diff = auto
  branch = auto
  interactive = always
  ui = auto

[commit]
  # https://help.github.com/articles/signing-commits-using-gpg/
  # gpgsign = true

[core]
  excludesfile = ~/.gitignore-global

  # Treat spaces before tabs and all kinds of trailing whitespace as an error
  # [default] trailing-space: looks for spaces at the end of a line
  # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
  whitespace = space-before-tab,-indent-with-non-tab,trailing-space

  # Make `git rebase` safer on macOS
  # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
  trustctime = false

  # Prevent showing files whose names contain non-ASCII symbols as unversioned.
  # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
  precomposeunicode = false

[diff]
  renames = copy
  mnemonicprefix = true

[filter "media"]
  clean = git-media-clean %f
  smudge = git-media-smudge %f

[filter "lfs"]
  clean = git lfs clean %f
  smudge = git lfs smudge %f
  required = true

[include]
  # User-specific sensitive config sections
  path = .gitconfig-user

[init]
  # Templates for git hooks and other files for the .git directory.
  templateDir = ~/.config/git_templates

[merge]
  summary = true

[pack]
  threads = 0

[pager]
  # via https://github.com/nojhan/dotfiles/blob/master/.gitconfig
  # the -R is necessary to display colors in less (and to match /^@@/ properly)
  # the '+' calls a command at start, that will jump to the first diff section
  # then, you just have to type 'n' to iterate over diff sections
  diff = less -R +'/^\\@\\@'

[push]
  default = matching

  # Make `git push` push relevant annotated tags when pushing branches out.
  followTags = true
